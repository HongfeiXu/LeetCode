#pragma once

/*

389. Find the Difference

Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.

Example:

Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.

Approach:
使用两个 unordered_map 记录每个字符串中字符出现的次数

Approach2:
使用一个 unordered_map，首先记录字符串s中字符出现的次数，接着减去t中字符出现的次数，若次数小于0，则对应的字符即为结果

*/

#include <string>
#include <unordered_map>

using namespace std;

class Solution {
public:
	char findTheDifference(string s, string t)
	{
		unordered_map<char, int> s_map;
		unordered_map<char, int> t_map;

		for (int i = 0; i < s.size(); ++i)
			++s_map[s[i]];
		for (int j = 0; j < t.size(); ++j)
			++t_map[t[j]];

		// 迭代 t_map 中的元素
		for (auto & item : t_map)
		{
			// 若该元素的 key 在 s_map 中不存在，则，该字符即为被添加的字符
			if (s_map.find(item.first) == s_map.end())
				return item.first;
			// 若该元素的 key 在 s_map 中也存在，但对应的 value 不同，则该字符为被添加的字符
			else if (s_map[item.first] != item.second)
				return item.first;
		}
	}
};

class Solution_v2 {
public:
	char findTheDifference(string s, string t)
	{
		unordered_map<char, int> um;

		for (int i = 0; i < s.size(); ++i)
		{
			++um[s[i]];
		}
		for (int i = 0; i < t.size(); ++i)
		{
			--um[t[i]];
			if (um[t[i]] < 0)
				return t[i];
		}
	}
};